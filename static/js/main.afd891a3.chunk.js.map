{"version":3,"sources":["api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["API_URL","a","fetch","response","json","userId","then","Options","TodoList","handler","useState","title","setTitle","todos","setTodos","selectedOption","setSelectedOption","allTodos","setAllTodos","useEffect","getTodos","todoItems","filteredByTitle","filter","todo","toLowerCase","includes","All","Active","currentTodos","completed","Completed","visibleTodos","className","type","value","onChange","event","target","placeholder","disabled","map","option","classNames","checked","readOnly","onClick","id","CurrentUser","clearHandler","selectedUser","setSelectedUser","getUser","user","name","email","phone","App","selectedUserId","setSelectedUserId","useCallback","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.afd891a3.chunk.js","sourcesContent":["import { Todo, User } from '../react-app-env';\n\nexport const API_URL = 'https://mate.academy/students-api';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n}\n\nexport async function getUser(userId: number): Promise<User> {\n  return fetch(`${API_URL}/users/${userId}`)\n    .then(response => response.json());\n}\n","import React, { useState, useEffect } from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { getTodos } from '../../api/api';\nimport { Todo } from '../../react-app-env';\n\ntype Props = {\n  handler: (id: number) => void\n};\n\nenum Options {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\nexport const TodoList: React.FC<Props> = ({ handler }) => {\n  const [title, setTitle] = useState('');\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedOption, setSelectedOption] = useState<Options | string>('');\n  const [allTodos, setAllTodos] = useState<Todo[]>([]);\n  const options = ['all', 'active', 'completed'];\n\n  useEffect(() => {\n    getTodos()\n      .then(todoItems => {\n        setAllTodos(todoItems);\n        setTodos(todoItems);\n      });\n  }, []);\n\n  const filteredByTitle = todos\n    .filter(todo => todo.title.toLowerCase().includes(title.toLowerCase()));\n\n  const visibleTodos = () => {\n    switch (selectedOption) {\n      case Options.All:\n        setTodos(allTodos);\n        break;\n      case Options.Active:\n        setTodos(currentTodos => currentTodos.filter(todo => !todo.completed));\n        break;\n      case Options.Completed:\n        setTodos(currentTodos => currentTodos.filter(todo => todo.completed));\n        break;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    visibleTodos();\n  }, [selectedOption]);\n\n  return (\n    <div className=\"TodoList\">\n      <input\n        type=\"text\"\n        value={title}\n        data-cy=\"filterByTitle\"\n        className=\"input\"\n        onChange={(event) => {\n          const { value } = event.target;\n\n          setTitle(value);\n        }}\n        placeholder=\"Enter a todo\"\n      />\n\n      <div className=\"select\">\n        <select\n          value={selectedOption}\n          onChange={event => setSelectedOption(event.target.value || '')}\n        >\n          <option value=\"\" disabled>Choose an option</option>\n          {options.map(option => (\n            <option value={option} key={option}>\n              {option}\n            </option>\n          ))}\n        </select>\n      </div>\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {filteredByTitle.map(todo => (\n            <li\n              className={classNames(\n                'TodoList__item', {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                },\n              )}\n              key={todo.id}\n            >\n              <label>\n                <input type=\"checkbox\" checked={todo.completed} readOnly />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n                type=\"button\"\n                data-cy=\"userButton\"\n                onClick={() => handler(todo.userId)}\n              >\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\nimport { User } from '../../react-app-env';\n\ntype Props = {\n  userId: number,\n  clearHandler: () => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, clearHandler }) => {\n  const [selectedUser, setSelectedUser] = useState<User>();\n\n  useEffect(() => {\n    getUser(userId)\n      .then(user => {\n        setSelectedUser(user);\n      });\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${selectedUser?.id}`}</span></h2>\n      <h3 className=\"CurrentUser__name\">{selectedUser?.name}</h3>\n      <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n      <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n\n      <button\n        type=\"button\"\n        onClick={clearHandler}\n        className=\"button\"\n      >\n        Clear\n      </button>\n\n    </div>\n  );\n};\n","import React, { useCallback, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState<number | null>(0);\n\n  const userHandlerId = (id: number) => {\n    setSelectedUserId(id);\n  };\n\n  const clearHandler = useCallback(() => {\n    setSelectedUserId(null);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList handler={userHandlerId} />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clearHandler={clearHandler}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}