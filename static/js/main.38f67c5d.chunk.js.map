{"version":3,"sources":["api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["API_URL","getTodos","a","fetch","response","json","getUser","userId","then","Options","TodoList","handler","useState","title","setTitle","todos","setTodos","selectedOption","setSelectedOption","allTodos","setAllTodos","requestTodo","todoFromServer","console","log","useEffect","filteredByTitle","filter","todo","toLowerCase","includes","All","Active","currentTodos","completed","Completed","visibleTodos","className","type","value","onChange","event","target","placeholder","disabled","map","option","classNames","checked","readOnly","onClick","id","CurrentUser","clearHandler","selectedUser","setSelectedUser","requestUser","userFromServer","name","email","phone","App","selectedUserId","setSelectedUserId","useCallback","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.38f67c5d.chunk.js","sourcesContent":["import { Todo, User } from '../react-app-env';\n\nexport const API_URL = 'https://mate.academy/students-api';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n}\n\nexport async function getUser(userId: number): Promise<User> {\n  return fetch(`${API_URL}/users/${userId}`)\n    .then(response => response.json());\n}\n","import React, { useState, useEffect } from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { getTodos } from '../../api/api';\nimport { Todo } from '../../react-app-env';\n\ntype Props = {\n  handler: (id: number) => void,\n  userId: number,\n};\n\nenum Options {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\nexport const TodoList: React.FC<Props> = ({ handler, userId }) => {\n  const [title, setTitle] = useState('');\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedOption, setSelectedOption] = useState<Options>();\n  const [allTodos, setAllTodos] = useState<Todo[]>([]);\n  const options = ['all', 'active', 'completed'];\n\n  const requestTodo = async () => {\n    try {\n      const todoFromServer = await getTodos();\n\n      setTodos(todoFromServer);\n      setAllTodos(todoFromServer);\n    } catch {\n      // eslint-disable-next-line no-console\n      console.log('Error: todo not found');\n    }\n  };\n\n  useEffect(() => {\n    requestTodo();\n  }, []);\n\n  const filteredByTitle = todos\n    .filter(todo => todo.title.toLowerCase().includes(title.toLowerCase()));\n\n  const visibleTodos = () => {\n    switch (selectedOption) {\n      case Options.All:\n        setTodos(allTodos);\n        break;\n      case Options.Active:\n        setTodos(currentTodos => currentTodos.filter(todo => !todo.completed));\n        break;\n      case Options.Completed:\n        setTodos(currentTodos => currentTodos.filter(todo => todo.completed));\n        break;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    visibleTodos();\n  }, [selectedOption]);\n\n  return (\n    <div className=\"TodoList\">\n      <input\n        type=\"text\"\n        value={title}\n        data-cy=\"filterByTitle\"\n        className=\"input\"\n        onChange={(event) => {\n          const { value } = event.target;\n\n          setTitle(value);\n        }}\n        placeholder=\"Enter a todo\"\n      />\n\n      <div className=\"select\">\n        <select\n          value={selectedOption}\n          onChange={event => setSelectedOption(event.target.value as Options)}\n        >\n          <option value=\"\" disabled>Choose an option</option>\n          {options.map(option => (\n            <option value={option} key={option}>\n              {option}\n            </option>\n          ))}\n        </select>\n      </div>\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {filteredByTitle.map(todo => (\n            <li\n              className={classNames(\n                'TodoList__item', {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                },\n              )}\n              key={todo.id}\n            >\n              <label>\n                <input type=\"checkbox\" checked={todo.completed} readOnly />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={classNames(\n                  'TodoList__user-button button',\n                  {\n                    'TodoList__user-button--selected':\n                      todo.userId === userId,\n                  },\n                )}\n                type=\"button\"\n                data-cy=\"userButton\"\n                onClick={() => handler(todo.userId)}\n              >\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\nimport { User } from '../../react-app-env';\n\ntype Props = {\n  userId: number,\n  clearHandler: () => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, clearHandler }) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>();\n\n  const requestUser = async () => {\n    try {\n      const userFromServer = await getUser(userId);\n\n      setSelectedUser(userFromServer);\n    } catch {\n      // eslint-disable-next-line no-console\n      console.log('Error: User not found');\n    }\n  };\n\n  useEffect(() => {\n    requestUser();\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${selectedUser?.id}`}</span></h2>\n      <h3 className=\"CurrentUser__name\">{selectedUser?.name}</h3>\n      <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n      <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n\n      <button\n        type=\"button\"\n        onClick={clearHandler}\n        className=\"button\"\n      >\n        Clear\n      </button>\n\n    </div>\n  );\n};\n","import React, { useCallback, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const userHandlerId = (id: number) => {\n    setSelectedUserId(id);\n  };\n\n  const clearHandler = useCallback(() => {\n    setSelectedUserId(0);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList handler={userHandlerId} userId={selectedUserId} />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clearHandler={clearHandler}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}